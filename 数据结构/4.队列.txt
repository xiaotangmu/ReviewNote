队列介绍

队列的定义
队列是一种先进先出（FIFO）的线性表，它只允许在表的一端插入元素，而在表的另一端删除元素。在队列中，允许插入的一端称为队尾（rear），允许删除元素的一端称为队头（front）。
队列的基本运算

    初始化队列InitQueen（Q）：创建一个空的队列Q。
    判队空Empty（Q）：当队列为空时返回”真“值，否则返回”假“值。
    入队EnQueue(Q,x)：将元素x加入到队列Q的队尾，并更新队尾指针。
    出队DeQueue(Q)：将队头元素从队列Q中删除，并更新队头指针。
    读队头元素FrontQueue（Q）；返回队头的值，但不更新队头指针。

队列的存储结构
（1）队列的顺序存储。
队列的顺序存储结构又称为顺序队列，它也是利用一组地址连续的存储单元存放队列中的元素。
   在顺序队列中，为了降低运算复杂度，元素入队时，只修改队尾指针；元素出队时，只修改队头指针。由于顺序队列的存储空间是提前设定的，因此队尾指针会有一个上限值，当队尾指针达到其上限时，就不能通过修改队尾指针来实现新元素的入队操作。此时可将顺序队列假想成一个环状结构。称之为循环队列。

原文链接：https://blog.csdn.net/heyuchang666/article/details/49364747

队列是一个有序列表，可以用数组或是链表来实现。

遵循先入先出的原则：

    先存入队列的数据，要先取出。
    后存入的要后取出

示意图：(使用数组模拟队列示意图)

3.实现方式1：数组模拟队列

思路分析

队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图, 其中 maxSize 是该队列的最大容量。

    front 是队列最前元素之前一个位置【不含最前】
    rear 是队列最后元素 【含最后】
    插入队列，判断是否已满，将尾指针往后移：rear++，然后插入arr[rear]
    移出队列，判断是否为空，将前指针往后移：front++，然后移出arr[front]
    队列为空判断条件：当front == rear 【空】
    队列是否满判断条件：rear == maxSize - 1【队列满】

代码实现
复制代码

// 使用数组模拟队列-编写一个ArrayQueue类
class ArrayQueue {
    private int maxSize; // 表示数组的最大容量
    private int front; // 队列头
    private int rear; // 队列尾
    private int[] arr; // 该数据用于存放数据, 模拟队列

    // 创建队列的构造器
    public ArrayQueue(int arrMaxSize) {
        maxSize = arrMaxSize;
        arr = new int[maxSize];
        front = -1; // 指向队列头部，分析出front是指向队列头的前一个位置.
        rear = -1; // 指向队列尾，指向队列尾的数据(即就是队列最后一个数据)
    }

    // 判断队列是否满
    public boolean isFull() {
        return rear == maxSize - 1;
    }

    // 判断队列是否为空
    public boolean isEmpty() {
        return rear == front;
    }

    // 添加数据到队列
    public void addQueue(int n) {
        // 判断队列是否满
        if (isFull()) {
            System.out.println("队列满，不能加入数据~");
            return;
        }
        rear++; // 让rear 后移
        arr[rear] = n;
    }

    // 获取队列的数据, 出队列
    public int getQueue() {
        // 判断队列是否空
        if (isEmpty()) {
            // 通过抛出异常
            throw new RuntimeException("队列空，不能取数据");
        }
        front++; // front后移
        return arr[front];

    }

    // 显示队列的所有数据
    public void showQueue() {
        // 遍历
        if (isEmpty()) {
            System.out.println("队列空的，没有数据~~");
            return;
        }
        for (int i = 0; i < arr.length; i++) {
            System.out.printf("arr[%d]=%d\n", i, arr[i]);
        }
    }

    // 显示队列的头数据， 注意不是取出数据
    public int headQueue() {
        // 判断
        if (isEmpty()) {
            throw new RuntimeException("队列空的，没有数据~~");
        }
        return arr[front + 1];
    }
}


出现问题

目前数组不能复用，用一次就用不了了

优化方式：将数组模拟成环形队列

4. 数组模拟环形队列

思路：

1.front变量的含义做调整：front指向队列的第一个元素，即arr[front]就是队列的第一个元素

2.rear变量的含义做调整：rear指向队列的最后一个元素的后一个元素，因为希望空出一个空间作为约定（队列实际容量=maxSize-1，理解为防止指向超出数组范围的地方报错）。

3.当队列满时，条件是：(rear + 1) % maxSize == front [满] 

4.当队列空时，条件是：rear == front [空]

5.队列中有效数据的个数：(rear + maxSize - front) % maxSize

6.插入队列时，判断队满，先插入队列arr[rear]，然后rear++

7.移出队列时，判断队空，先移出队列arr[front]，然后front++

代码实现

class CircleArray {
    private int maxSize; // 表示数组的最大容量
    //front 变量的含义做一个调整： front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素 
    //front 的初始值 = 0
    private int front; 
    //rear 变量的含义做一个调整：rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定.
    //rear 的初始值 = 0
    private int rear; // 队列尾
    private int[] arr; // 该数据用于存放数据, 模拟队列
    
    public CircleArray(int arrMaxSize) {
        maxSize = arrMaxSize;
        arr = new int[maxSize];
    }
    
    // 判断队列是否满
    public boolean isFull() {
        return (rear  + 1) % maxSize == front;
    }
    
    // 判断队列是否为空
    public boolean isEmpty() {
        return rear == front;
    }
    
    // 添加数据到队列
    public void addQueue(int n) {
        // 判断队列是否满
        if (isFull()) {
            System.out.println("队列满，不能加入数据~");
            return;
        }
        //直接将数据加入
        arr[rear] = n;
        //将 rear 后移, 这里必须考虑取模
        rear = (rear + 1) % maxSize;
    }
    
    // 获取队列的数据, 出队列
    public int getQueue() {
        // 判断队列是否空
        if (isEmpty()) {
            // 通过抛出异常
            throw new RuntimeException("队列空，不能取数据");
        }
        // 这里需要分析出 front是指向队列的第一个元素
        // 1. 先把 front 对应的值保留到一个临时变量
        // 2. 将 front 后移, 考虑取模
        // 3. 将临时保存的变量返回
        int value = arr[front];
        front = (front + 1) % maxSize;
        return value;

    }
    
    // 显示队列的所有数据
    public void showQueue() {
        // 遍历
        if (isEmpty()) {
            System.out.println("队列空的，没有数据~~");
            return;
        }
        // 思路：从front开始遍历，遍历多少个元素
        // 动脑筋
        for (int i = front; i < front + size() ; i++) {
            System.out.printf("arr[%d]=%d\n", i % maxSize, arr[i % maxSize]);
        }
    }
    
    // 求出当前队列有效数据的个数
    public int size() {
        // rear = 2
        // front = 1
        // maxSize = 3 
        return (rear + maxSize - front) % maxSize;   
    }
    
    // 显示队列的头数据， 注意不是取出数据
    public int headQueue() {
        // 判断
        if (isEmpty()) {
            throw new RuntimeException("队列空的，没有数据~~");
        }
        return arr[front];
    }
}
