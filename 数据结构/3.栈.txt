（一）栈的定义及基本运算

（1）栈的定义

       栈是只能通过访问它的一端来实现数据存储和检索的一种线性数据结构。
换句话说，栈的修改是按先进后出的原则进行的。因此，栈又称为先进后出（FILO）的线性表。
在栈中进行插入和删除操作的一端称为栈顶（top），相应地，另一端称为栈底（bottom）。
不含数据元素的栈称为空栈。


（二）栈的存储结构

（1）栈的顺序存储。栈的顺序存储是指用一组地址连续的存储单元依次存储自栈顶到栈底的数据元素，
同时附设指针top指示栈顶元素的位置。采用顺序存储结构的栈也称为顺序栈。在顺序存储方式下，
需要预先定义或申请栈的存储空间，也就是说栈空间的容量是有限的。因此在顺序栈中，当一个元素入栈时，
需要判断是否栈满（即栈空间中没有空闲单元），若栈满，则元素入栈会发生上溢现象。

（2）栈的链式存储。为了克服顺序存储的栈可以存在上溢的不足，可以用链表存储栈中的元素。
用链表作为存储结构的栈也称为链栈。由于栈中元素的插入和删除仅在栈顶一端进行，因此不必另外设置头指针，
链表的头指针就是栈顶指针。


Java中如何使用栈

      栈是一种数据结构，可以分为链式栈和数组栈（顺序栈），顾名思义，链式栈的底层是用链表实现的，数组栈的底层是用数组实现的，下面就来谈一下JDK中的栈。

      很多人都说Java中官方实现了专门的栈类Stack，该类位于java.util包下，一起来看一下继承结构：
在这里插入图片描述
      该类继承了Vector类，Vector类是Java中已经淘汰的一个类，该类底层是数组实现，并且是线程安全的，Stack类继承了该类后就具有了这两个特性，这两个特性也是Stack最大的缺点:

    底层使用数组，具体的来说就是动态数组，扩容方式需要重新申请大的内存空间 ，而且要把原数组中的值拷贝，效率是很低的
    该类线程安全，从另一方面来说，确保了线程安全就需要一定的开销，那么在很多场景下是不需要线程安全的，所以这个功能显得有些赘余，降低效率。

既然JDK提供的Stack类有这两个缺点，那么在实际的使用中应该如何去使用栈？

      在Java中提供了一个类LinkedList，该类相信有些人不会陌生，链表啊，但是该类其实不光是链表，其实还是链式栈，链式队列，该类提供了一些方法来满足栈和队列的功能，而且该栈的底层是链表实现的，所以扩容就不用担心了，不存在数组动态扩容的低效问题，并且非线程安全，所以完美的解决了上面的两个缺点。一起来看一下常用方法：

push : 入栈
pop : 出栈
peek : 返回栈顶元素
empty : 是否为空
size : 返回栈中元素的个数

用法非常简单，要想更加深入的了解栈，一起来实现一下：
自己实现一个栈
数组栈

class MyStack<T> {
    private T[] elemData;
    private int size;
    private static final int DEFAULT_CAPACITY = 10;
    public MyStack() {
        elemData = (T[])new Object[10];
        size = 0;
    }
    //判断栈满
    public boolean isFull() {
        return size >= elemData.length;
    }
    //判断栈空
    public boolean isEmpty() {
        return size <= 0;
    }
    //扩容
    private void grow() {
        elemData = Arrays.copyOf(elemData,elemData.length*2+2);
    }
    //入栈
    public boolean push(T data) {
        if(isFull()) {
            grow();
        }
        elemData[size++] = data;
        return true;
    }
    //出栈
    public T pop() {
        if(isEmpty()) {
            try {
                throw new IllegalAccessException("栈空，不可出栈");
            } catch (IllegalAccessException e) {
                e.printStackTrace();;
            }
        }
        T temp = elemData[--size];
        //防止内存泄漏
        elemData[size] = null;
        return temp;
    }
    //获得栈顶元素
    public T peek() {
        if(isEmpty()) {
            try {
                throw new IllegalAccessException("栈空，无栈顶元素");
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
        return elemData[size-1];
    }
}

      下面来解释一下这段代码，这是自己实现的一个栈，，使用泛型进行编写，内部是使用数组进行实现的，需要注意的有几点：

    因为底层是使用数组进行编写，所以为了防止开辟的大小不够，改进为动态数组，也就是每次入栈元素前先进行判断是否需要扩容，如果需要扩容则进行2倍扩容，开辟新的数组把原数组的值拷贝过来
    在出栈的时候要注意栈空
    为了防止内存泄漏，在出栈的时候记得把不用的对象置为空

链式栈

class MiNiStack<T> {
    //定义top指针
    private Entry<T> top;

    public MiNiStack() {
        this.top = new Entry<>();
    }

    /**
     * 入栈，相当于链表的头插过程
     * @param data
     */
    public void push(T data) {
        Entry<T> entry = new Entry<>(data, top.next);
        top.next = entry;
    }

    /**
     * 出栈，删除第一个节点
     * @return
     */
    public T pop() {
        if(isEmpty()) {
            throw new IllegalArgumentException("栈空，出栈失败");
        }
        T var = top.next.data;
        top.next = top.next.next;
        return var;
    }

    /**
     * 返回栈中元素的个数
     * @return
     */
    public int size() {
        int size = 0;
        Entry<T> cur = top.next;
        while (cur != null) {
            size++;
            cur = cur.next;
        }
        return size;
    }

    /**
     * 判断栈是否为空
     * @return
     */
    private boolean isEmpty() {
        return top.next == null;
    }

    //定义节点Entry
    class Entry<T>{
        private T data;
        private Entry<T> next;

        public Entry() {
            this(null,null);
        }

        public Entry(T data, Entry<T> next) {
            this.data = data;
            this.next = next;
        }
    }
}

    链式栈的实现底层使用了链表，这样就不用担心扩容的问题，一定程度上提高了效率
    在实现上是把链表的头部当做栈顶，入栈和出栈都是从链表的头部进行操作
    入栈其实就是链表的头插操作
    出栈直接删除链表的第一个数据节点

总结

      综上，我们是不推荐使用jdk提供的Stack，除非是并发情况下。可以使用LinkedList或者自己去实现一个泛型的链式栈，把功能实现的完备一点，方便自己的经常使用。
